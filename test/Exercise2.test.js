const { expect } = require('chai');
const { getBytes, keccak256 } = require('ethers');

// Start test block
describe('Exercise2', function () {
  before(async function () {
    this.Exercise2 = await ethers.getContractFactory('Exercise2');
  });

  beforeEach(async function () {
    this.exercise2 = await this.Exercise2.deploy();
    await this.exercise2.waitForDeployment();
  });

  // Test case
  it('should pass without failing', async function () {

    let hashBytes = new Uint8Array(32) [
      160,  64, 70,  28,  54, 241, 244, 112,
      114, 233, 79, 125,  25,  70,  27, 225,
      219, 211, 34, 161, 194, 194, 181, 121,
       58, 244, 43,  13, 114, 187, 171,  63
    ];
    const hashString = new TextDecoder().decode(hashBytes);
    const signature = "0xa6047212f38d40142e7271bfb75cf8c601f64be37f08a9a3ca6c797d48d773db6af5744aa60dc962202eb641c1c94126589355706812e9602c435cc09d160dc9";
    let evenBytes = getBytes(signature); //64 bytes
    let signatureBytes = new Uint8Array(65);
    signatureBytes[64] = 27;
    signatureBytes.set(evenBytes, 0);
    const hashBytes32 = "0xa040461c36f1f47072e94f7d19461be1dbd322a1c2c2b5793af42b0d72bbab3f"
    const transactionData = {
      gasLimit: 458981n,
      value: 0n,
      nonce: 0,
      data: '0x6080604052600080546001600160a01b031916700ccc7439f4972897ccd70994123e0921bc17905534801561003357600080fd5b506106f1806100436000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806304989798146100465780634125fcce1461005b5780635f35c0921461008b575b600080fd5b6100596100543660046105e4565b6100c9565b005b60005461006e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b9610099366004610533565b805160208183018101805160018252928201919093012091525460ff1681565b6040519015158152602001610082565b600061014185856040516020016100e1929190610660565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b600054604080516020601f87018190048102820181019092528581529293506001600160a01b039091169161019391869086908190840183828082843760009201919091525086939250506102579050565b6001600160a01b0316146101ee5760405162461bcd60e51b815260206004820152601360248201527f7369676e6174757265206e6f742076616c69640000000000000000000000000060448201526064015b60405180910390fd5b60018383604051610200929190610650565b9081526040519081900360200190205460ff161561021d57600080fd5b6001808484604051610230929190610650565b908152604051908190036020019020805491151560ff199092169190911790555050505050565b6000806000610266858561027b565b91509150610273816102c1565b509392505050565b6000808251604114156102b25760208301516040840151606085015160001a6102a68782858561042d565b945094505050506102ba565b506000905060025b9250929050565b60008160048111156102d5576102d561068f565b14156102de5750565b60018160048111156102f2576102f261068f565b14156103405760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016101e5565b60028160048111156103545761035461068f565b14156103a25760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016101e5565b60038160048111156103b6576103b661068f565b141561042a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016101e5565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561046457506000905060036104e8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156104b8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166104e1576000600192509250506104e8565b9150600090505b94509492505050565b60008083601f84011261050357600080fd5b50813567ffffffffffffffff81111561051b57600080fd5b6020830191508360208285010111156102ba57600080fd5b60006020828403121561054557600080fd5b813567ffffffffffffffff8082111561055d57600080fd5b818401915084601f83011261057157600080fd5b813581811115610583576105836106a5565b604051601f8201601f19908116603f011681019083821181831017156105ab576105ab6106a5565b816040528281528760208487010111156105c457600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080604085870312156105fa57600080fd5b843567ffffffffffffffff8082111561061257600080fd5b61061e888389016104f1565b9096509450602087013591508082111561063757600080fd5b50610644878288016104f1565b95989497509550505050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220deea54fa1a454f8490377164cbcdbbb3d751c4d425cb3d52d301450aa166512c64736f6c63430008070033',
      chainId: 137n,
      to: null,
      type: 2,
      maxFeePerGas: 413488612022n,
      maxPriorityFeePerGas: 100000000000n
    }
    //console.log(signatureBytes);
    //await this.exercise2.challenge(hashString,"0xf25e29a951681c6dc49db7697ba3cafe0574c131e919966519a5ba11293c33ec");

    BigInt.prototype["toJSON"] = function () {
      return this.toString();
    };

    const rstransaction = await hre.ethers.resolveProperties(transactionData);
    const raw = ethers.Transaction.from(rstransaction).unsignedSerialized;

    //console.log(raw);
    console.log("Hash that is valid: %s", keccak256(raw));

    await this.exercise2.verifyHash(keccak256(raw), signatureBytes);

    //0x gets prepended 
    await this.exercise2.challenge2(raw.substring(2), signatureBytes);
  });
});